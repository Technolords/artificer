- Discover how sequence diagrams can be extracted (i.e. what stateful data must be preserved)

- Discover how to source all attributes from XML

- Implement test cases for various situations:
    use samples from: http://classfileanalyzer.javaseiten.de/index.html
    read invoke dynamic: http://www.javaworld.com/article/2860079/learn-java/invokedynamic-101.html
    test with static initializer blocks

    test with lambda's
        public static <K, U> Collector<Map.Entry<K, U>, ?, Map<K, U>> entriesToMap() {
            return Collectors.toMap((e) -> e.getKey(), (e) -> e.getValue());
        }

        public static <K, U> Collector<Map.Entry<K, U>, ?, Map<K, U>> entriesToMap() {
            return Collectors.toMap((e) -> (e).getKey(), (e) -> (e).getValue());
        }

- Implement all cases for the SignatureAnalyser

- Implement combination of all referenced resources per resource (kind of finalize?)

-------------------------

- compile list of se classes and ee classes
    - decide which class keeps this state

- extend roadmap with
    techno-tools
        artificer                                       -> generates data
        artificer-javadoc                               -> generates presentation
        artificer-camel-route                           -> generates presentation

- keep track of annotations??

- keep track of invoked methods?? -> derive sequence diagrams

- other stuf
    /analysis/dotxml
        MetaInfManager
        OsgiInfManager
        WebInfManager

    /analysis/dotmf
        ManifestManager